/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,7],$V2=[1,8],$V3=[1,13],$V4=[1,26],$V5=[1,28],$V6=[1,27],$V7=[1,34],$V8=[1,24],$V9=[1,23],$Va=[1,22],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[2,5,8,14,15,20,34,37,38,43,46,48,49,53,54,76,77,78,79,80],$Vh=[1,46],$Vi=[1,61],$Vj=[1,53],$Vk=[1,55],$Vl=[1,54],$Vm=[1,52],$Vn=[1,56],$Vo=[1,57],$Vp=[1,58],$Vq=[1,59],$Vr=[1,60],$Vs=[1,68],$Vt=[11,31,33],$Vu=[2,27],$Vv=[1,80],$Vw=[1,81],$Vx=[1,82],$Vy=[1,83],$Vz=[1,84],$VA=[1,85],$VB=[1,86],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[1,91],$VH=[11,33,36,47,58,59,60,61,62,63,64,65,66,67,68,69],$VI=[1,110],$VJ=[1,114],$VK=[33,36],$VL=[2,5,8,14,15,20,34,37,38,42,43,46,48,49,53,54,76,77,78,79,80],$VM=[11,33,36,47,58,59,62,63,64,65,66,67,68,69],$VN=[11,33,36,47,62,63,64,65,66,67,68,69],$VO=[11,33,36,47,64,65,68,69],$VP=[1,168],$VQ=[8,46];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"Lista_Instrucciones":4,"EOF":5,"Bloque":6,"CABRE":7,"CCIERRA":8,"Instruccion":9,"Declaracion":10,"PYC":11,"Asignacion":12,"Sent_Imprimir":13,"RESBREAK":14,"RESCONTINUE":15,"Sent_Return":16,"Sent_Metodo":17,"Sent_Funcion":18,"Sent_Llamada":19,"IDENTIFICADOR":20,"INCREMENTO":21,"DECREMENTO":22,"Sent_If":23,"Sent_Switch":24,"Sent_For":25,"Sent_While":26,"Sent_DoWhile":27,"Sent_Main":28,"TipoDato":29,"Lista_Identificador":30,"IGUAL":31,"Expresion":32,"COMA":33,"RESWHILE":34,"PABRE":35,"PCIERRA":36,"RESDO":37,"RESFOR":38,"Init_For":39,"End_For":40,"Lista_Condiciones":41,"RESELSE":42,"RESIF":43,"Lista_Casos":44,"Caso":45,"RESCASE":46,"DOSPUNTOS":47,"RESDEFAULT":48,"RESVOID":49,"ListaParametros":50,"Parametro":51,"Lista_Argumentos":52,"RESRETURN":53,"RESCONSOLE":54,"PUNTO":55,"RESWRITE":56,"RESMAIN":57,"MAS":58,"MENOS":59,"MULTI":60,"DIV":61,"MAYOR":62,"MENOR":63,"DIFERENTEDE":64,"DOBLEIGUAL":65,"MAYORIGUAL":66,"MENORIGUAL":67,"AND":68,"OR":69,"NOT":70,"ENTERO":71,"DECIMAL":72,"CADENA":73,"RESTRUE":74,"RESFALSE":75,"RESINT":76,"RESDOUBLE":77,"RESSTRING":78,"RESBOOL":79,"RESCHAR":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"CABRE",8:"CCIERRA",11:"PYC",14:"RESBREAK",15:"RESCONTINUE",20:"IDENTIFICADOR",21:"INCREMENTO",22:"DECREMENTO",31:"IGUAL",33:"COMA",34:"RESWHILE",35:"PABRE",36:"PCIERRA",37:"RESDO",38:"RESFOR",42:"RESELSE",43:"RESIF",46:"RESCASE",47:"DOSPUNTOS",48:"RESDEFAULT",49:"RESVOID",53:"RESRETURN",54:"RESCONSOLE",55:"PUNTO",56:"RESWRITE",57:"RESMAIN",58:"MAS",59:"MENOS",60:"MULTI",61:"DIV",62:"MAYOR",63:"MENOR",64:"DIFERENTEDE",65:"DOBLEIGUAL",66:"MAYORIGUAL",67:"MENORIGUAL",68:"AND",69:"OR",70:"NOT",71:"ENTERO",72:"DECIMAL",73:"CADENA",74:"RESTRUE",75:"RESFALSE",76:"RESINT",77:"RESDOUBLE",78:"RESSTRING",79:"RESBOOL",80:"RESCHAR"},
productions_: [0,[3,2],[6,2],[6,3],[4,2],[4,1],[9,2],[9,2],[9,2],[9,2],[9,2],[9,2],[9,1],[9,1],[9,2],[9,3],[9,3],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[10,4],[10,2],[30,3],[30,1],[12,3],[26,5],[27,6],[25,10],[39,1],[39,1],[40,1],[40,2],[40,2],[23,3],[23,1],[41,7],[41,5],[24,7],[44,2],[44,1],[45,7],[17,5],[17,6],[18,5],[50,3],[50,1],[51,2],[52,3],[52,1],[19,3],[19,4],[16,2],[16,1],[13,6],[28,7],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,3],[32,2],[32,2],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,2],[32,2],[32,3],[32,4],[29,1],[29,1],[29,1],[29,1],[29,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        var raiz = new Nodo_aux.Nodo("RAIZ");
        raiz.agregarHijo($$[$0-1]);
        this.$ = raiz; 
        return this.$;

        

break;
case 2:

                var lista = new Nodo_aux.Nodo("LISTA_INSTRUCCIONES");
                this.$ = lista;
        
break;
case 3:

                this.$ =$$[$0-1];
        
break;
case 4:

                var lista = $$[$0-1];
                lista.agregarHijo($$[$0]);
                this.$ = lista;
        
break;
case 5:

                var lista = new Nodo_aux.Nodo("INSTRUCCION");
                lista.agregarHijo($$[$0]);
                this.$ = lista;  
        
break;
case 6:
this.$ = $$[$0-1]; 
break;
case 7: case 8: case 11: case 14:
this.$ = $$[$0-1];
break;
case 9:

                var bre = new Nodo_aux.Nodo("BREAK");
                this.$ = bre;
        
break;
case 10:

                var cont = new Nodo_aux.Nodo("CONT");
                this.$ = cont;
        
break;
case 12: case 13: case 17: case 18: case 19: case 20: case 21: case 22:
this.$ = $$[$0];
break;
case 15:

               var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
               var incre = new Nodo_aux.Nodo("INCREMENTO");
               var varia = new Nodo_aux.Nodo($$[$0-2]+"");
               iden.agregarHijo(varia);
               incre.agregarHijo(iden);
               this.$ = incre;

       
break;
case 16:

               var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
               var decre = new Nodo_aux.Nodo("DECREMENTO");
               var varia = new Nodo_aux.Nodo($$[$0-2]+"");
               iden.agregarHijo(varia);
               incre.agregarHijo(iden);
               this.$ = decre;

       
break;
case 23:

                var er = new Nodo_aux.Nodo("Error");

             Errores_1.errores.add(new nodoError_1.NodoError('Sintactico',yytext,this._$.first_line,this._$.first_column));
                this.$ = er;
        
break;
case 24:

                var decla = new Nodo_aux.Nodo("DECLARACION");
                decla.agregarHijo($$[$0-3]);
                decla.agregarHijo($$[$0-2]);
                decla.agregarHijo($$[$0]);

                this.$=decla;
        
break;
case 25:

                var decla = new Nodo_aux.Nodo("DECLARACION");
                decla.agregarHijo($$[$0-1]);
                decla.agregarHijo($$[$0]);
                


                this.$=decla;
                
                
        
break;
case 26:

                var lista = $$[$0-2];
                var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
                var varia = new Nodo_aux.Nodo($$[$0]+"");
                iden.agregarHijo(varia);
                lista.agregarHijo(iden);
                this.$ = lista;
        
        
break;
case 27:

                var lista = new Nodo_aux.Nodo("LISTA_VARIABLES");
                var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
                var varia = new Nodo_aux.Nodo($$[$0]+"");
                iden.agregarHijo(varia);
                lista.agregarHijo(iden);
                this.$ = lista;
                
        
break;
case 28:

                 var asigna = new Nodo_aux.Nodo("ASIGNACION");
                 var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
                 var expre = new Nodo_aux.Nodo("EXPRESION");
                 var varia = new Nodo_aux.Nodo($$[$0-2]+"");
                 iden.agregarHijo(varia);
                 expre.agregarHijo($$[$0]);
                 asigna.agregarHijo(iden);
                 asigna.agregarHijo(expre);

                 this.$ = asigna;
                 
break;
case 45:

        var metod = new Nodo_aux.Nodo("Metodo");
        var tipo = new Nodo_aux.Nodo("TIPO");
        var vo = new Nodo_aux.Nodo("VOID");
        tipo.agregarHijo(vo);

        var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
        var varia = new Nodo_aux.Nodo($$[$0-3]+"");
        iden.agregarHijo(varia);

        metod.agregarHijo(tipo);
        metod.agregarHijo(iden);
        metod.agregarHijo($$[$0]);

        this.$ = metod;



break;
case 46:

        var metod = new Nodo_aux.Nodo("METODO");
        var tipo = new Nodo_aux.Nodo("TIPO");
        var vo = new Nodo_aux.Nodo("VOID");
        tipo.agregarHijo(vo);

        var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
        var varia = new Nodo_aux.Nodo($$[$0-4] + "");
        iden.agregarHijo(varia);

        metod.agregarHijo(tipo);
        metod.agregarHijo(iden);
        metod.agregarHijo($$[$0-2]);
        metod.agregarHijo($$[$0]);



        this.$ = metod;
       

        

        
break;
case 48:

        var lista = $$[$0-2];
        lista.agregarHijo($$[$0]);
        this.$ = lista;

break;
case 49:

                var lista = new Nodo_aux.Nodo("LISTA_PARAMETROS");
                lista.agregarHijo($$[$0]);
                this.$ = lista;
                
        
break;
case 50:

        
        var param = new Nodo_aux.Nodo("PARAMETRO");
       
        param.agregarHijo($$[$0-1]);

        var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
        
        var varia = new Nodo_aux.Nodo($$[$0] + "");
        iden.agregarHijo(varia);
        param.agregarHijo(iden);

        this.$ = param;
        

break;
case 75:

                var temp = new Nodo_aux.Nodo("EXPRESION");
                var temp2 = new Nodo_aux.Nodo("PRIMITIVO");
                temp.agregarHijo(temp2);
                this.$= temp;
        
break;
case 85:

                var temp = new Nodo_aux.Nodo("TIPO");
                var temp2 = new Nodo_aux.Nodo("INT");
                temp.agregarHijo(temp2);
                this.$ = temp;
                
        
break;
case 86:

                var temp = new Nodo_aux.Nodo("TIPO");
                var temp2 = new Nodo_aux.Nodo("DOUBLE");
                temp.agregarHijo(temp2);
                this.$ = temp;
        
break;
case 87:

                var temp = new Nodo_aux.Nodo("TIPO");
                var temp2 = new Nodo_aux.Nodo("STRING");
                temp.agregarHijo(temp2);
                this.$ = temp;
        
break;
case 88:

                var temp = new Nodo_aux.Nodo("TIPO");
                var temp2 = new Nodo_aux.Nodo("BOOL");
                temp.agregarHijo(temp2);
                this.$ = temp;
        
break;
case 89:

                var temp = new Nodo_aux.Nodo("TIPO");
                var temp2 = new Nodo_aux.Nodo("CHAR");
                temp.agregarHijo(temp2);
                this.$ = temp;
        
break;
}
},
table: [{2:$V0,3:1,4:2,9:3,10:4,12:5,13:6,14:$V1,15:$V2,16:9,17:10,18:11,19:12,20:$V3,23:14,24:15,25:16,26:17,27:18,28:19,29:21,34:$V4,37:$V5,38:$V6,41:25,43:$V7,49:$V8,53:$V9,54:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{1:[3]},{2:$V0,5:[1,35],9:36,10:4,12:5,13:6,14:$V1,15:$V2,16:9,17:10,18:11,19:12,20:$V3,23:14,24:15,25:16,26:17,27:18,28:19,29:21,34:$V4,37:$V5,38:$V6,41:25,43:$V7,49:$V8,53:$V9,54:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},o($Vg,[2,5]),{11:[1,37]},{11:[1,38]},{11:[1,39]},{11:[1,40]},{11:[1,41]},{11:[1,42]},o($Vg,[2,12]),o($Vg,[2,13]),{11:[1,43]},{21:[1,44],22:[1,45],31:$Vh,35:[1,47]},o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,19]),o($Vg,[2,20]),o($Vg,[2,21]),o($Vg,[2,22]),o($Vg,[2,23]),{20:[1,49],30:48},{55:[1,50]},{11:[2,56],20:$Vi,32:51,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{20:[1,62],57:[1,63]},o($Vg,[2,38],{42:[1,64]}),{35:[1,65]},{35:[1,66]},{6:67,7:$Vs},{20:[2,85]},{20:[2,86]},{20:[2,87]},{20:[2,88]},{20:[2,89]},{35:[1,69]},{1:[2,1]},o($Vg,[2,4]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,14]),{11:[1,70]},{11:[1,71]},{20:$Vi,32:72,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{20:$Vi,32:75,35:$Vj,36:[1,73],52:74,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{11:[2,25],31:[1,76],33:[1,77]},o($Vt,$Vu,{35:[1,78]}),{56:[1,79]},{11:[2,55],58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG},{20:$Vi,32:92,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{20:$Vi,32:93,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{20:$Vi,32:94,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{20:$Vi,32:95,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},o($VH,[2,75]),o($VH,[2,76]),o($VH,[2,77]),o($VH,[2,78]),o($VH,[2,79]),o($VH,[2,80],{21:[1,96],22:[1,97],35:[1,98]}),{35:[1,99]},{35:[1,100]},{6:101,7:$Vs,43:[1,102]},{20:$Vi,32:103,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{10:105,12:106,20:[1,108],29:107,39:104,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{34:[1,109]},{2:$V0,4:111,8:$VI,9:3,10:4,12:5,13:6,14:$V1,15:$V2,16:9,17:10,18:11,19:12,20:$V3,23:14,24:15,25:16,26:17,27:18,28:19,29:21,34:$V4,37:$V5,38:$V6,41:25,43:$V7,49:$V8,53:$V9,54:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{20:$Vi,32:112,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},o($Vg,[2,15]),o($Vg,[2,16]),{11:[2,28],58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG},{11:[2,53]},{33:$VJ,36:[1,113]},o($VK,[2,52],{58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG}),{20:$Vi,32:115,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{20:[1,116]},{36:[1,117]},{35:[1,118]},{20:$Vi,32:119,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{20:$Vi,32:120,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{20:$Vi,32:121,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{20:$Vi,32:122,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{20:$Vi,32:123,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{20:$Vi,32:124,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{20:$Vi,32:125,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{20:$Vi,32:126,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{20:$Vi,32:127,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{20:$Vi,32:128,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{20:$Vi,32:129,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{20:$Vi,32:130,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},o($VH,[2,71]),{36:[1,131],58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG},o($VH,[2,73]),o($VH,[2,74]),o($VH,[2,81]),o($VH,[2,82]),{20:$Vi,32:75,35:$Vj,36:[1,132],52:133,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{29:137,36:[1,134],50:135,51:136,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{36:[1,138]},o($Vg,[2,37]),{35:[1,139]},{36:[1,140],58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG},{11:[1,141]},{11:[2,32]},{11:[2,33]},{20:[1,142],30:48},{31:$Vh},{35:[1,143]},o($VL,[2,2]),{2:$V0,8:[1,144],9:36,10:4,12:5,13:6,14:$V1,15:$V2,16:9,17:10,18:11,19:12,20:$V3,23:14,24:15,25:16,26:17,27:18,28:19,29:21,34:$V4,37:$V5,38:$V6,41:25,43:$V7,49:$V8,53:$V9,54:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{36:[1,145],58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG},{11:[2,54]},{20:$Vi,32:146,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{11:[2,24],58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG},o($Vt,[2,26]),{6:147,7:$Vs},{20:$Vi,32:148,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},o($VM,[2,59],{60:$Vx,61:$Vy}),o($VM,[2,60],{60:$Vx,61:$Vy}),o($VH,[2,61]),o($VH,[2,62]),o($VN,[2,63],{58:$Vv,59:$Vw,60:$Vx,61:$Vy}),o($VN,[2,64],{58:$Vv,59:$Vw,60:$Vx,61:$Vy}),o($VO,[2,65],{58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,66:$VD,67:$VE}),o($VO,[2,66],{58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,66:$VD,67:$VE}),o($VN,[2,67],{58:$Vv,59:$Vw,60:$Vx,61:$Vy}),o($VN,[2,68],{58:$Vv,59:$Vw,60:$Vx,61:$Vy}),o([11,33,36,47,68,69],[2,69],{58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE}),o([11,33,36,47,69],[2,70],{58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),o($VH,[2,72]),o($VH,[2,83]),{33:$VJ,36:[1,149]},{6:150,7:$Vs},{33:[1,152],36:[1,151]},o($VK,[2,49]),{20:[1,153]},{7:[1,154]},{20:$Vi,32:155,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{6:157,7:[1,156]},{20:$Vi,32:158,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},o($Vt,$Vu),{20:$Vi,32:159,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},o($VL,[2,3]),{6:160,7:$Vs},o($VK,[2,51],{58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG}),o($Vg,[2,47]),{36:[1,161],58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG},o($VH,[2,84]),o($Vg,[2,45]),{6:162,7:$Vs},{29:137,51:163,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},o($VK,[2,50]),{2:$V0,4:164,9:3,10:4,12:5,13:6,14:$V1,15:$V2,16:9,17:10,18:11,19:12,20:$V3,23:14,24:15,25:16,26:17,27:18,28:19,29:21,34:$V4,37:$V5,38:$V6,41:25,43:$V7,49:$V8,53:$V9,54:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{36:[1,165],58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG},{2:$V0,4:111,8:$VI,9:3,10:4,12:5,13:6,14:$V1,15:$V2,16:9,17:10,18:11,19:12,20:$V3,23:14,24:15,25:16,26:17,27:18,28:19,29:21,34:$V4,37:$V5,38:$V6,41:25,43:$V7,44:166,45:167,46:$VP,49:$V8,53:$V9,54:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},o($Vg,[2,29]),{11:[1,169],58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG},{36:[1,170],58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG},o($VL,[2,40]),{11:[2,57]},o($Vg,[2,46]),o($VK,[2,48]),{2:$V0,8:[1,171],9:36,10:4,12:5,13:6,14:$V1,15:$V2,16:9,17:10,18:11,19:12,20:$V3,23:14,24:15,25:16,26:17,27:18,28:19,29:21,34:$V4,37:$V5,38:$V6,41:25,43:$V7,49:$V8,53:$V9,54:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{6:172,7:$Vs},{8:[1,173],45:174,46:$VP},o($VQ,[2,43]),{20:$Vi,32:175,35:$Vj,58:$Vk,59:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr},{12:177,20:[1,178],40:176},o($Vg,[2,30]),o($Vg,[2,58]),o($VL,[2,39]),o($Vg,[2,41]),o($VQ,[2,42]),{47:[1,179],58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG},{11:[1,180]},{11:[2,34]},{21:[1,181],22:[1,182],31:$Vh},{2:$V0,4:183,9:3,10:4,12:5,13:6,14:$V1,15:$V2,16:9,17:10,18:11,19:12,20:$V3,23:14,24:15,25:16,26:17,27:18,28:19,29:21,34:$V4,37:$V5,38:$V6,41:25,43:$V7,49:$V8,53:$V9,54:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{36:[1,184]},{11:[2,35]},{11:[2,36]},{2:$V0,9:36,10:4,12:5,13:6,14:$V1,15:$V2,16:9,17:10,18:11,19:12,20:$V3,23:14,24:15,25:16,26:17,27:18,28:19,29:21,34:$V4,37:$V5,38:$V6,41:25,43:$V7,48:[1,185],49:$V8,53:$V9,54:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{6:186,7:$Vs},{47:[1,187]},o($Vg,[2,31]),{2:$V0,4:188,9:3,10:4,12:5,13:6,14:$V1,15:$V2,16:9,17:10,18:11,19:12,20:$V3,23:14,24:15,25:16,26:17,27:18,28:19,29:21,34:$V4,37:$V5,38:$V6,41:25,43:$V7,49:$V8,53:$V9,54:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},o($VQ,[2,44],{10:4,12:5,13:6,16:9,17:10,18:11,19:12,23:14,24:15,25:16,26:17,27:18,28:19,29:21,41:25,9:36,2:$V0,14:$V1,15:$V2,20:$V3,34:$V4,37:$V5,38:$V6,43:$V7,49:$V8,53:$V9,54:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf})],
defaultActions: {29:[2,85],30:[2,86],31:[2,87],32:[2,88],33:[2,89],35:[2,1],73:[2,53],105:[2,32],106:[2,33],113:[2,54],161:[2,57],177:[2,34],181:[2,35],182:[2,36]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

let Errores_1 = require('../Ast/src/errores');
let nodoError_1=require('../Ast/src/NodoError');

let Nodo_aux = require('../Ast/src/Nodo');

let lista_variables = require('../Ast/src/Variable');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 76;
break;
case 1:return 77;
break;
case 2:return 80;
break;
case 3:return 79;
break;
case 4:return 78;
break;
case 5:return 49;
break;
case 6:return 57;
break;
case 7:return 43;
break;
case 8:return 54;
break;
case 9:return 56;
break;
case 10:return 42;
break;
case 11:return 'RESSWITCH';
break;
case 12:return 46;
break;
case 13:return 14;
break;
case 14:return 48;
break;
case 15:return 38;
break;
case 16:return 34;
break;
case 17:return 37;
break;
case 18:return  'RESRETURN';
break;
case 19:return 15;
break;
case 20:return 74;
break;
case 21:return 75;
break;
case 22:return 11;
break;
case 23:return 7;
break;
case 24:return 8;
break;
case 25:return 35;
break;
case 26:return 36;
break;
case 27:return 33;
break;
case 28:return 55;
break;
case 29:return 47;
break;
case 30:return 31;
break;
case 31:return 65;
break;
case 32:return 62;
break;
case 33:return 63;
break;
case 34:return 64;
break;
case 35:return 67;
break;
case 36:return 66;
break;
case 37:return 68;
break;
case 38:return 69;
break;
case 39:return 70;
break;
case 40:return 58;
break;
case 41:return 59;
break;
case 42:return 61;
break;
case 43:return 60;
break;
case 44:return 21;
break;
case 45:return  'DECREMENTO';
break;
case 46: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 73; 
break;
case 47:return 71;
break;
case 48:return 20;
break;
case 49:return 72;
break;
case 50:
break;
case 51:
break;
case 52:return 5;
break;
case 53: //console.error('Error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                        Errores_1.errores.add(new nodoError_1.NodoError('Lexico',yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));
                                                 
break;
}
},
rules: [/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:string\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:if\b)/i,/^(?:Console\b)/i,/^(?:Write\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:=)/i,/^(?:==)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:\s+)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}