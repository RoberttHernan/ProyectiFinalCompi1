/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,7],$V2=[1,8],$V3=[1,13],$V4=[1,28],$V5=[1,29],$V6=[1,27],$V7=[1,35],$V8=[1,26],$V9=[1,24],$Va=[1,23],$Vb=[1,22],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[2,5,8,14,15,20,34,37,38,43,44,47,49,50,54,55,78,79,80,81,82],$Vi=[1,47],$Vj=[1,64],$Vk=[1,55],$Vl=[1,57],$Vm=[1,56],$Vn=[1,54],$Vo=[1,58],$Vp=[1,59],$Vq=[1,60],$Vr=[1,61],$Vs=[1,62],$Vt=[1,63],$Vu=[1,72],$Vv=[11,31,33],$Vw=[2,27],$Vx=[1,84],$Vy=[1,85],$Vz=[1,86],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[11,33,36,48,59,60,61,62,63,64,65,66,67,68,69,70],$VK=[33,36],$VL=[2,5,8,14,15,20,34,37,38,42,43,44,47,49,50,54,55,78,79,80,81,82],$VM=[1,153],$VN=[11,33,36,48,59,60,63,64,65,66,67,68,69,70],$VO=[11,33,36,48,63,64,65,66,67,68,69,70],$VP=[11,33,36,48,65,66,69,70],$VQ=[1,172],$VR=[1,173],$VS=[8,47,49];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"Lista_Instrucciones":4,"EOF":5,"Bloque":6,"CABRE":7,"CCIERRA":8,"Instruccion":9,"Declaracion":10,"PYC":11,"Asignacion":12,"Sent_Imprimir":13,"RESBREAK":14,"RESCONTINUE":15,"Sent_Return":16,"Sent_Metodo":17,"Sent_Funcion":18,"Sent_Llamada":19,"IDENTIFICADOR":20,"INCREMENTO":21,"DECREMENTO":22,"Sent_If":23,"Sent_Switch":24,"Sent_For":25,"Sent_While":26,"Sent_DoWhile":27,"Sent_Main":28,"TipoDato":29,"Lista_Identificador":30,"IGUAL":31,"Expresion":32,"COMA":33,"RESWHILE":34,"PABRE":35,"PCIERRA":36,"RESDO":37,"RESFOR":38,"Init_For":39,"End_For":40,"Lista_Condiciones":41,"RESELSE":42,"RESIF":43,"RESSWITCH":44,"Lista_Casos":45,"Caso":46,"RESCASE":47,"DOSPUNTOS":48,"RESDEFAULT":49,"RESVOID":50,"ListaParametros":51,"Parametro":52,"Lista_Argumentos":53,"RESRETURN":54,"RESCONSOLE":55,"PUNTO":56,"RESWRITE":57,"RESMAIN":58,"MAS":59,"MENOS":60,"MULTI":61,"DIV":62,"MAYOR":63,"MENOR":64,"DIFERENTEDE":65,"DOBLEIGUAL":66,"MAYORIGUAL":67,"MENORIGUAL":68,"AND":69,"OR":70,"NOT":71,"ENTERO":72,"DECIMAL":73,"CADENA":74,"CADENAHTML":75,"RESTRUE":76,"RESFALSE":77,"RESINT":78,"RESDOUBLE":79,"RESSTRING":80,"RESBOOL":81,"RESCHAR":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"CABRE",8:"CCIERRA",11:"PYC",14:"RESBREAK",15:"RESCONTINUE",20:"IDENTIFICADOR",21:"INCREMENTO",22:"DECREMENTO",31:"IGUAL",33:"COMA",34:"RESWHILE",35:"PABRE",36:"PCIERRA",37:"RESDO",38:"RESFOR",42:"RESELSE",43:"RESIF",44:"RESSWITCH",47:"RESCASE",48:"DOSPUNTOS",49:"RESDEFAULT",50:"RESVOID",54:"RESRETURN",55:"RESCONSOLE",56:"PUNTO",57:"RESWRITE",58:"RESMAIN",59:"MAS",60:"MENOS",61:"MULTI",62:"DIV",63:"MAYOR",64:"MENOR",65:"DIFERENTEDE",66:"DOBLEIGUAL",67:"MAYORIGUAL",68:"MENORIGUAL",69:"AND",70:"OR",71:"NOT",72:"ENTERO",73:"DECIMAL",74:"CADENA",75:"CADENAHTML",76:"RESTRUE",77:"RESFALSE",78:"RESINT",79:"RESDOUBLE",80:"RESSTRING",81:"RESBOOL",82:"RESCHAR"},
productions_: [0,[3,2],[6,2],[6,3],[4,2],[4,1],[9,2],[9,2],[9,2],[9,2],[9,2],[9,2],[9,1],[9,1],[9,2],[9,3],[9,3],[9,1],[9,1],[9,1],[9,1],[9,2],[9,1],[9,1],[10,4],[10,2],[30,3],[30,1],[12,3],[26,5],[27,6],[25,9],[39,1],[39,1],[40,1],[40,2],[40,2],[23,3],[23,1],[41,7],[41,5],[24,7],[45,2],[45,1],[46,4],[46,3],[17,5],[17,6],[18,5],[18,6],[51,3],[51,1],[52,2],[53,3],[53,1],[19,3],[19,4],[16,2],[16,1],[13,6],[28,5],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,3],[32,2],[32,2],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,2],[32,2],[29,1],[29,1],[29,1],[29,1],[29,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

       
       try{
        var raiz = new Nodo_aux.Nodo("RAIZ");
        raiz.agregarHijo($$[$0-1]);
        this.$ = raiz; 
        return this.$;
       }catch (error){}
        

        

break;
case 2:

                var lista = new Nodo_aux.Nodo("LISTA_INSTRUCCIONES");
                this.$ = lista;
        
break;
case 3:

                this.$ =$$[$0-1];
        
break;
case 4:

                var lista = $$[$0-1];
                lista.agregarHijo($$[$0]);
                this.$ = lista;
        
break;
case 5:

                var lista = new Nodo_aux.Nodo("INSTRUCCION");
                lista.agregarHijo($$[$0]);
                this.$ = lista;  
        
break;
case 6:
this.$ = $$[$0-1]; 
break;
case 7: case 8: case 11: case 14: case 21: case 74:
this.$ = $$[$0-1];
break;
case 9:

                var bre = new Nodo_aux.Nodo("BREAK");
                this.$ = bre;
        
break;
case 10:

                var cont = new Nodo_aux.Nodo("CONTINUE");
                this.$ = cont;
        
break;
case 12: case 13: case 17: case 18: case 19: case 20: case 22:
this.$ = $$[$0];
break;
case 15:

               var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
               var incre = new Nodo_aux.Nodo("INCREMENTO");
               var varia = new Nodo_aux.Nodo($$[$0-2]+"");
               iden.agregarHijo(varia);
               incre.agregarHijo(iden);
               this.$ = incre;

       
break;
case 16:

               var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
               var decre = new Nodo_aux.Nodo("DECREMENTO");
               var varia = new Nodo_aux.Nodo($$[$0-2]+"");
               iden.agregarHijo(varia);
               incre.agregarHijo(iden);
               this.$ = decre;

       
break;
case 23:

               
                var er = new Nodo_aux.Nodo("Error");

             Errores_1.errores.add(new nodoError_1.NodoError('Sintactico luego de: ',yytext,this._$.first_line,this._$.first_column));
                this.$ = er;

        
break;
case 24:

                var decla = new Nodo_aux.Nodo("DECLARACION");
                decla.agregarHijo($$[$0-3]);
                decla.agregarHijo($$[$0-2]);
                decla.agregarHijo($$[$0]);

                this.$=decla;
        
break;
case 25:

                var decla = new Nodo_aux.Nodo("DECLARACION");
                decla.agregarHijo($$[$0-1]);
                decla.agregarHijo($$[$0]);
                


                this.$=decla;
                
                
        
break;
case 26:

                var lista = $$[$0-2];
                var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
                var varia = new Nodo_aux.Nodo($$[$0]+"");
                iden.agregarHijo(varia);
                lista.agregarHijo(iden);
                this.$ = lista;
        
        
break;
case 27:

                var lista = new Nodo_aux.Nodo("LISTA_VARIABLES");
                var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
                var varia = new Nodo_aux.Nodo($$[$0]+"");
                iden.agregarHijo(varia);
                lista.agregarHijo(iden);
                this.$ = lista;
                
        
break;
case 28:

                 var asigna = new Nodo_aux.Nodo("ASIGNACION");
                 var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
                 var expre = new Nodo_aux.Nodo("EXPRESION");
                 var varia = new Nodo_aux.Nodo($$[$0-2]+"");
                 iden.agregarHijo(varia);
                 expre.agregarHijo($$[$0]);
                 asigna.agregarHijo(iden);
                 asigna.agregarHijo(expre);

                 this.$ = asigna;
                 
break;
case 29:

        var while_nombre = new Nodo_aux.Nodo("WHILE");
        var cond = new Nodo_aux.Nodo("CONDICION");
        var expr = new Nodo_aux.Nodo("EXPRESION");
        expr.agregarHijo($$[$0-2]);
        cond.agregarHijo(expr);

        while_nombre.agregarHijo(cond);
        while_nombre.agregarHijo($$[$0]);
        this.$=while_nombre;

break;
case 30:

        var do_w = new Nodo_aux.Nodo("DO_WHILE");
        var cond = new Nodo_aux.Nodo("CONDICION");
        var expr = new Nodo_aux.Nodo("EXPRESION");
        expr.agregarHijo($$[$0-1]);
        cond.agregarHijo(expr);

        do_w.agregarHijo($$[$0-4]);
        do_w.agregarHijo(cond);
        this.$=do_w;

break;
case 31:

       
        var defFor = new Nodo_aux.Nodo("FOR");  
        var cond = new Nodo_aux.Nodo("CONDICION");
        var expr = new Nodo_aux.Nodo("EXPRESION");
        
        expr.agregarHijo($$[$0-4]);
        
        cond.agregarHijo(expr);

        defFor.agregarHijo($$[$0-6]);
        defFor.agregarHijo(cond);
        defFor.agregarHijo($$[$0-2]);
        defFor.agregarHijo($$[$0]);

        this.$= defFor;
       

break;
case 32:

        
        var init = new Nodo_aux.Nodo("INICIO");
        init.agregarHijo($$[$0]);
        
        this.$ = init;
       
        

break;
case 33:

            var init = new Nodo_aux.Nodo("INICIO");
            init.agregarHijo($$[$0]);
            this.$ = init;    
        
break;
case 34:

        var en_for = new Nodo_aux.Nodo("END_FOR");
        en_for.agregarHijo($$[$0]);
        this.$ = en_for;



break;
case 35:

                
                var en_for = new Nodo_aux.Nodo("END_FOR");
                var incre = new Nodo_aux.Nodo("INCREMENTO");
                var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
                var varia = new Nodo_aux.Nodo($$[$0-1]+"");
                iden.agregarHijo(varia);
                incre.agregarHijo(iden);
                en_for.agregarHijo(incre);
                this.$ = en_for;
                
        
break;
case 36:

                var en_for = new Nodo_aux.Nodo("END_FOR");
                var decre = new Nodo_aux.Nodo("DECREMENTO");
                var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
                var varia = new Nodo_aux.Nodo($$[$0-1]+"");
                iden.agregarHijo(varia);
                decre.agregarHijo(iden);
                en_for.agregarHijo(decre);
                this.$ = en_for;   
        
break;
case 37:

        var sentIf =$$[$0-2];
        var sElse = new Nodo_aux.Nodo("ELSE");
        sElse.agregarHijo($$[$0]);
        sentIf.agregarHijo(sElse);

        this.$ = sentIf;

break;
case 38:
 this.$ = $$[$0];
break;
case 39:

                var listaCondiciones = $$[$0-6];
                var elseIf = new Nodo_aux.Nodo("ELSE_IF");

                var cond = new Nodo_aux.Nodo("CONDICION");
                var expr = new Nodo_aux.Nodo("EXPRESION");
                expr.agregarHijo($$[$0-2]);
                cond.agregarHijo(expr);

                elseIf.agregarHijo(cond);
                elseIf.agregarHijo($$[$0]);
                listaCondiciones.agregarHijo(elseIf);
                this.$ = listaCondiciones;
        
break;
case 40:

                var defIf = new Nodo_aux.Nodo("SENTENCIA_IF");
                var tempIf = new Nodo_aux.Nodo("IF");
                var cond = new Nodo_aux.Nodo("CONDICION");
                var expr = new Nodo_aux.Nodo("EXPRESION");
                expr.agregarHijo($$[$0-2]);
                cond.agregarHijo(expr);
                tempIf.agregarHijo(cond);
                tempIf.agregarHijo($$[$0]);
                defIf.agregarHijo(tempIf);
                this.$ = defIf;
                
        
break;
case 41:

        
        var swi = new Nodo_aux.Nodo("SENT_SWITCH");
        var param = new Nodo_aux.Nodo("PARAMETRO");
        var expr = new Nodo_aux.Nodo("EXPRESION");
        expr.agregarHijo($$[$0-4]);
        param.agregarHijo(expr);
        swi.agregarHijo(param);
        swi.agregarHijo($$[$0-1]);
        this.$ = swi;
        
        

break;
case 42:

       
        var lista = $$[$0-1];
        lista.agregarHijo($$[$0]);
        this.$ = lista;

break;
case 43:

                
                var lista = new Nodo_aux.Nodo("LISTA_CASOS");
                lista.agregarHijo($$[$0]);
                this.$ = lista;
        
break;
case 44:

        
        var caso = new Nodo_aux.Nodo("CASO");
        var cond = new Nodo_aux.Nodo("CONDICION");
        var expr = new Nodo_aux.Nodo("EXPRESION");
        expr.agregarHijo($$[$0-2]);
        cond.agregarHijo(expr);
        caso.agregarHijo(cond);
        caso.agregarHijo($$[$0]);

        this.$ = caso;
        


break;
case 45:

                var def = new Nodo_aux.Nodo("DEFAULT");
                def.agregarHijo($$[$0]);
                this.$ = def;
                
        
break;
case 46:

        var metod = new Nodo_aux.Nodo("METODO");
        var tipo = new Nodo_aux.Nodo("TIPO");
        var vo = new Nodo_aux.Nodo("VOID");
        tipo.agregarHijo(vo);

        var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
        var varia = new Nodo_aux.Nodo($$[$0-3]+"");
        iden.agregarHijo(varia);

        metod.agregarHijo(tipo);
        metod.agregarHijo(iden);
        metod.agregarHijo($$[$0]);

        this.$ = metod;



break;
case 47:

        var metod = new Nodo_aux.Nodo("METODO");
        var tipo = new Nodo_aux.Nodo("TIPO");
        var vo = new Nodo_aux.Nodo("VOID");
        tipo.agregarHijo(vo);

        var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
        var varia = new Nodo_aux.Nodo($$[$0-4] + "");
        iden.agregarHijo(varia);

        metod.agregarHijo(tipo);
        metod.agregarHijo(iden);
        metod.agregarHijo($$[$0-2]);
        metod.agregarHijo($$[$0]);



        this.$ = metod;
       

        

        
break;
case 48:

        var func = new Nodo_aux.Nodo("FUNCION");
        var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
        var varia = new Nodo_aux.Nodo($$[$0-3] +"");
        iden.agregarHijo(varia);
        func.agregarHijo($$[$0-4]);
        func.agregarHijo(iden);
        func.agregarHijo($$[$0]);
        this.$ = func;

break;
case 49:

        var func = new Nodo_aux.Nodo("FUNCION");
        var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
        var varia = new Nodo_aux.Nodo($$[$0-4] +"");
        iden.agregarHijo(varia);
        func.agregarHijo($$[$0-5]);
        func.agregarHijo(iden);
        func.agregarHijo($$[$0-2]);
        func.agregarHijo($$[$0]);
        this.$ = func;
        
break;
case 50:

        var lista = $$[$0-2];
        lista.agregarHijo($$[$0]);
        this.$ = lista;

break;
case 51:

                var lista = new Nodo_aux.Nodo("LISTA_PARAMETROS");
                lista.agregarHijo($$[$0]);
                this.$ = lista;
                
        
break;
case 52:

        
        var param = new Nodo_aux.Nodo("PARAMETRO");
       
        param.agregarHijo($$[$0-1]);

        var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
        
        var varia = new Nodo_aux.Nodo($$[$0] + "");
        iden.agregarHijo(varia);
        param.agregarHijo(iden);

        this.$ = param;
        

break;
case 53:

        var lista_arg = $$[$0-2];
        var expr = new Nodo_aux.Nodo("EXPRESION");
        expr.agregarHijo($$[$0]);
        lista_arg.agregarHijo(expr);
        this.$ = lista_arg;

break;
case 54:

                var lista_arg = new Nodo_aux.Nodo("LISTA_ARGUMENTOS");
                var expr = new Nodo_aux.Nodo("EXPRESION");
                expr.agregarHijo($$[$0]);
                lista_arg.agregarHijo(expr);
                this.$ = lista_arg;

        
break;
case 55:

        var llama = new Nodo_aux.Nodo("LLAMADA");
        var ide = new Nodo_aux.Nodo("IDENTIFICADOR");
        var varia = new Nodo_aux.Nodo($$[$0-2]+"");
        ide.agregarHijo(varia);
        llama.agregarHijo(ide);
        this.$ = llama;

break;
case 56:

        var llama = new Nodo_aux.Nodo("LLAMADA");  
        var ide = new Nodo_aux.Nodo("IDENTIFICADOR");
        var varia = new Nodo_aux.Nodo($$[$0-3]+""); 
        ide.agregarHijo(varia);
        llama.agregarHijo(ide);
        llama.agregarHijo($$[$0-1]);
        this.$ = llama;
        
break;
case 57:

        var ret = new Nodo_aux.Nodo("RETURN");
        var expr = new Nodo_aux.Nodo("EXPRESION");
        expr.agregarHijo($$[$0]);
        ret.agregarHijo(expr);
        this.$ = ret;

break;
case 58:

           var ret = new Nodo_aux.Nodo("RETURN");
           this.$ = ret;     
        
break;
case 59:

        var print = new Nodo_aux.Nodo("CONSOLE_WRITE");
        var expr = new Nodo_aux.Nodo ("EXPRESION");
        expr.agregarHijo($$[$0-1]);
        print.agregarHijo(expr);
        this.$ = print;


break;
case 60:

        var metod = new Nodo_aux.Nodo("METODO");
        var tipo = new Nodo_aux.Nodo("TIPO");
        var vo = new Nodo_aux.Nodo("MAIN");
        tipo.agregarHijo(vo);
        metod.agregarHijo(tipo);
        metod.agregarHijo($$[$0]);

        this.$ = metod;

break;
case 61:

        var temp = new Nodo_aux.Nodo("OPERACION");
        var sum = new Nodo_aux.Nodo("SUMA");
        temp.agregarHijo(sum);
        var temp2 = new Nodo_aux.Nodo("EXPRESION");
        temp2.agregarHijo($$[$0-2]);
        var temp3 = new Nodo_aux.Nodo("EXPRESION");
        temp3.agregarHijo($$[$0]);

        sum.agregarHijo(temp2);
        sum.agregarHijo(temp3);
        temp.agregarHijo(sum);

        this.$ = temp;

break;
case 62:


        var temp = new Nodo_aux.Nodo("OPERACION");
        var res = new Nodo_aux.Nodo("RESTA");
        temp.agregarHijo(res);
        var temp2 = new Nodo_aux.Nodo("EXPRESION");
        temp2.agregarHijo($$[$0-2]);
        var temp3 = new Nodo_aux.Nodo("EXPRESION");
        temp3.agregarHijo($$[$0]);

        res.agregarHijo(temp2);
        res.agregarHijo(temp3);
        temp.agregarHijo(res);

        this.$ = temp;
        
break;
case 63:


        var temp = new Nodo_aux.Nodo("OPERACION");
        var op = new Nodo_aux.Nodo("MULTI");
        temp.agregarHijo(op);
        var temp2 = new Nodo_aux.Nodo("EXPRESION");
        temp2.agregarHijo($$[$0-2]);
        var temp3 = new Nodo_aux.Nodo("EXPRESION");
        temp3.agregarHijo($$[$0]);

        op.agregarHijo(temp2);
        op.agregarHijo(temp3);
        temp.agregarHijo(op);

        this.$ = temp;
        
break;
case 64:

        var temp = new Nodo_aux.Nodo("OPERACION");
        var op = new Nodo_aux.Nodo("DIV");
        temp.agregarHijo(op);
        var temp2 = new Nodo_aux.Nodo("EXPRESION");
        temp2.agregarHijo($$[$0-2]);
        var temp3 = new Nodo_aux.Nodo("EXPRESION");
        temp3.agregarHijo($$[$0]);

        op.agregarHijo(temp2);
        op.agregarHijo(temp3);
        temp.agregarHijo(op);

        this.$ = temp;
        
break;
case 65:

        var temp = new Nodo_aux.Nodo("RELACION");
        var op = new Nodo_aux.Nodo("MAYOR");
        temp.agregarHijo(op);

        var temp2 = new Nodo_aux.Nodo("EXPRESION");
        temp2.agregarHijo($$[$0-2]);
        var temp3 = new Nodo_aux.Nodo("EXPRESION");
        temp3.agregarHijo($$[$0]);

        op.agregarHijo(temp2);
        op.agregarHijo(temp3);
        temp.agregarHijo(op);

        this.$ = temp;
        
break;
case 66:

        var temp = new Nodo_aux.Nodo("RELACION");
        var op = new Nodo_aux.Nodo("MENOR");
        temp.agregarHijo(op);
        var temp2 = new Nodo_aux.Nodo("EXPRESION");
        temp2.agregarHijo($$[$0-2]);
        var temp3 = new Nodo_aux.Nodo("EXPRESION");
        temp3.agregarHijo($$[$0]);

        op.agregarHijo(temp2);
        op.agregarHijo(temp3);
        temp.agregarHijo(op);

        this.$ = temp;
        
break;
case 67:

        var temp = new Nodo_aux.Nodo("RELACION");
        var op = new Nodo_aux.Nodo("DIFERENTE_DE");
        temp.agregarHijo(op);
        var temp2 = new Nodo_aux.Nodo("EXPRESION");
        temp2.agregarHijo($$[$0-2]);
        var temp3 = new Nodo_aux.Nodo("EXPRESION");
        temp3.agregarHijo($$[$0]);

        op.agregarHijo(temp2);
        op.agregarHijo(temp3);
        temp.agregarHijo(op);

        this.$ = temp;
        
break;
case 68:

        var temp = new Nodo_aux.Nodo("RELACION");
        var op = new Nodo_aux.Nodo("COMPARACION");
        temp.agregarHijo(op);
        var temp2 = new Nodo_aux.Nodo("EXPRESION");
        temp2.agregarHijo($$[$0-2]);
        var temp3 = new Nodo_aux.Nodo("EXPRESION");
        temp3.agregarHijo($$[$0]);

        op.agregarHijo(temp2);
        op.agregarHijo(temp3);
        temp.agregarHijo(op);

        this.$ = temp;
       
        
break;
case 69:

        var temp = new Nodo_aux.Nodo("RELACION");
        var op = new Nodo_aux.Nodo("MAYOR_IGUAL");
        temp.agregarHijo(op);
        var temp2 = new Nodo_aux.Nodo("EXPRESION");
        temp2.agregarHijo($$[$0-2]);
        var temp3 = new Nodo_aux.Nodo("EXPRESION");
        temp3.agregarHijo($$[$0]);

        op.agregarHijo(temp2);
        op.agregarHijo(temp3);
        temp.agregarHijo(op);

        this.$ = temp;     
        
break;
case 70:

        var temp = new Nodo_aux.Nodo("RELACION");
        var op = new Nodo_aux.Nodo("MENOR_IGUAL");
        temp.agregarHijo(op);
        var temp2 = new Nodo_aux.Nodo("EXPRESION");
        temp2.agregarHijo($$[$0-2]);
        var temp3 = new Nodo_aux.Nodo("EXPRESION");
        temp3.agregarHijo($$[$0]);

        op.agregarHijo(temp2);
        op.agregarHijo(temp3);
        temp.agregarHijo(op);

        this.$ = temp;
        
break;
case 71:

        var temp = new Nodo_aux.Nodo("LOGICA");
        var op = new Nodo_aux.Nodo("AND");
        temp.agregarHijo(op);
        var temp2 = new Nodo_aux.Nodo("EXPRESION");
        temp2.agregarHijo($$[$0-2]);
        var temp3 = new Nodo_aux.Nodo("EXPRESION");
        temp3.agregarHijo($$[$0]);

        op.agregarHijo(temp2);
        op.agregarHijo(temp3);
        temp.agregarHijo(op);

        this.$ = temp;
        
break;
case 72:

        var temp = new Nodo_aux.Nodo("LOGICA");
        var op = new Nodo_aux.Nodo("OR");
        temp.agregarHijo(op);
        var temp2 = new Nodo_aux.Nodo("EXPRESION");
        temp2.agregarHijo($$[$0-2]);
        var temp3 = new Nodo_aux.Nodo("EXPRESION");
        temp3.agregarHijo($$[$0]);

        op.agregarHijo(temp2);
        op.agregarHijo(temp3);
        temp.agregarHijo(op);

        this.$ = temp;
        
break;
case 73:

        var temp = new Nodo_aux.Nodo("LOGICA");
        var op = new Nodo_aux.Nodo("NOT");
        temp.agregarHijo(op);
        var temp2 = new Nodo_aux.Nodo("EXPRESION");
        temp2.agregarHijo($$[$0]);

       op.agregarHijo(temp2);

        this.$ = temp;
        
break;
case 75:

                var temp = new Nodo_aux.Nodo("OPERACION");
                var temp2 = new Nodo_aux.Nodo("MENOS_UNARIO");
                var expr = new Nodo_aux.Nodo("EXPRESION");
                temp.agregarHijo(temp2);
                expr.agregarHijo(temp2);

                temp2.agregarHijo(expr);

                this.$ = temp;
        
break;
case 76:

                var temp = new Nodo_aux.Nodo("OPERACION");
                var temp2 = new Nodo_aux.Nodo("MAS_UNARIO");
                var expr = new Nodo_aux.Nodo("EXPRESION");
                temp.agregarHijo(temp2);
                expr.agregarHijo(temp2);

                temp2.agregarHijo(expr);

                this.$ = temp;
        
break;
case 77:

                var temp = new Nodo_aux.Nodo("EXPRESION");
                var temp2 = new Nodo_aux.Nodo("DATO_PRIMITIVO");
                var ent = new Nodo_aux.Nodo($$[$0]+"");
                temp2.agregarHijo(ent);
                temp.agregarHijo(temp2);
                this.$= temp;
        
break;
case 78:

                var temp = new Nodo_aux.Nodo("EXPRESION");
                var temp2 = new Nodo_aux.Nodo("DATO_PRIMITIVO");
                var dec = new Nodo_aux.Nodo($$[$0]+"");
                temp2.agregarHijo(dec);
                temp.agregarHijo(temp2);
                this.$= temp;     
        
break;
case 79:

                var temp = new Nodo_aux.Nodo("EXPRESION");
                var temp2 = new Nodo_aux.Nodo("DATO_PRIMITIVO");
                var cad = new Nodo_aux.Nodo($$[$0]+"");
                temp2.agregarHijo(cad);
                temp.agregarHijo(temp2);
                this.$= temp;
        
break;
case 80:

               
                var temp = new Nodo_aux.Nodo("EXPRESION");
                var temp2;
                if ($$[$0].length == 1){
                temp2 = new Nodo_aux.Nodo("DATO_PRIMITIVO");
                }else{
                     temp2 = new Nodo_aux.Nodo("HTML");   
                }
                
               var car = new Nodo_aux.Nodo($$[$0]);
                temp2.agregarHijo(car);
               temp.agregarHijo(temp2);
                this.$ = temp;  
        
break;
case 81:


                var temp = new Nodo_aux.Nodo("EXPRESION");
                var temp2 = new Nodo_aux.Nodo("TRUE");
                var tru = new Nodo_aux.Nodo($$[$0]+"");
                temp2.agregarHijo(tru);
                temp.agregarHijo(temp2);
                
                
                this.$= temp;
        
break;
case 82:


                var temp = new Nodo_aux.Nodo("EXPRESION");
                var temp2 = new Nodo_aux.Nodo("FALSE");
                var fals = new Nodo_aux.Nodo($$[$0]+"");
                temp2.agregarHijo(fals);
                temp.agregarHijo(temp2);
                this.$= temp;
        
break;
case 83:

                var expr = new Nodo_aux.Nodo("EXPRESION");
                var iden = new Nodo_aux.Nodo("IDENTIFICADOR");
                var varia = new Nodo_aux.Nodo($$[$0]+"");
                iden.agregarHijo(varia);
                expr.agregarHijo(iden);
                this.$ = expr;
                
                
        
break;
case 84:

                var expr = new Nodo_aux.Nodo("EXPRESION");
                var ide = new Nodo_aux.Nodo("IDENTIFICADOR");
                var incre = new Nodo_aux.Nodo("INCREMENTO");
                var varia = new Nodo_aux.Nodo($$[$0-1]+"");
                ide.agregarHijo(varia);
                expr.agregarHijo(ide);
                expr.agregarHijo(incre);
                this.$ = expr;
        
break;
case 85:

                var expr = new Nodo_aux.Nodo("EXPRESION");
                var ide = new Nodo_aux.Nodo("IDENTIFICADOR");
                var decre = new Nodo_aux.Nodo("DECREMENTO");
                var varia = new Nodo_aux.Nodo($$[$0-1]+"");
                ide.agregarHijo(varia);
                expr.agregarHijo(ide);
                expr.agregarHijo(decre);
                this.$ = expr;
        
break;
case 86:

                var temp = new Nodo_aux.Nodo("TIPO");
                var temp2 = new Nodo_aux.Nodo("INT");
                temp.agregarHijo(temp2);
                this.$ = temp;
                
        
break;
case 87:

                var temp = new Nodo_aux.Nodo("TIPO");
                var temp2 = new Nodo_aux.Nodo("DOUBLE");
                temp.agregarHijo(temp2);
                this.$ = temp;
        
break;
case 88:

                var temp = new Nodo_aux.Nodo("TIPO");
                var temp2 = new Nodo_aux.Nodo("STRING");
                temp.agregarHijo(temp2);
                this.$ = temp;
        
break;
case 89:

                var temp = new Nodo_aux.Nodo("TIPO");
                var temp2 = new Nodo_aux.Nodo("BOOL");
                temp.agregarHijo(temp2);
                this.$ = temp;
        
break;
case 90:

                
                var temp = new Nodo_aux.Nodo("TIPO");
                var temp2 = new Nodo_aux.Nodo("CHAR");
                temp.agregarHijo(temp2);
                this.$ = temp;
                
        
break;
}
},
table: [{2:$V0,3:1,4:2,9:3,10:4,12:5,13:6,14:$V1,15:$V2,16:9,17:10,18:11,19:12,20:$V3,23:14,24:15,25:16,26:17,27:18,28:19,29:21,34:$V4,37:$V5,38:$V6,41:25,43:$V7,44:$V8,50:$V9,54:$Va,55:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,82:$Vg},{1:[3]},{2:$V0,5:[1,36],9:37,10:4,12:5,13:6,14:$V1,15:$V2,16:9,17:10,18:11,19:12,20:$V3,23:14,24:15,25:16,26:17,27:18,28:19,29:21,34:$V4,37:$V5,38:$V6,41:25,43:$V7,44:$V8,50:$V9,54:$Va,55:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,82:$Vg},o($Vh,[2,5]),{11:[1,38]},{11:[1,39]},{11:[1,40]},{11:[1,41]},{11:[1,42]},{11:[1,43]},o($Vh,[2,12]),o($Vh,[2,13]),{11:[1,44]},{21:[1,45],22:[1,46],31:$Vi,35:[1,48]},o($Vh,[2,17]),o($Vh,[2,18]),o($Vh,[2,19]),o($Vh,[2,20]),{11:[1,49]},o($Vh,[2,22]),o($Vh,[2,23]),{20:[1,51],30:50},{56:[1,52]},{11:[2,58],20:$Vj,32:53,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{20:[1,65],58:[1,66]},o($Vh,[2,38],{42:[1,67]}),{35:[1,68]},{35:[1,69]},{35:[1,70]},{6:71,7:$Vu},{20:[2,86]},{20:[2,87]},{20:[2,88]},{20:[2,89]},{20:[2,90]},{35:[1,73]},{1:[2,1]},o($Vh,[2,4]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,14]),{11:[1,74]},{11:[1,75]},{20:$Vj,32:76,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{20:$Vj,32:79,35:$Vk,36:[1,77],53:78,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},o($Vh,[2,21]),{11:[2,25],31:[1,80],33:[1,81]},o($Vv,$Vw,{35:[1,82]}),{57:[1,83]},{11:[2,57],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI},{20:$Vj,32:96,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{20:$Vj,32:97,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{20:$Vj,32:98,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{20:$Vj,32:99,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},o($VJ,[2,77]),o($VJ,[2,78]),o($VJ,[2,79]),o($VJ,[2,80]),o($VJ,[2,81]),o($VJ,[2,82]),o($VJ,[2,83],{21:[1,100],22:[1,101]}),{35:[1,102]},{35:[1,103]},{6:104,7:$Vu,43:[1,105]},{20:$Vj,32:106,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{10:108,12:109,20:[1,111],29:110,39:107,78:$Vc,79:$Vd,80:$Ve,81:$Vf,82:$Vg},{20:$Vj,32:112,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{34:[1,113]},{2:$V0,4:115,8:[1,114],9:3,10:4,12:5,13:6,14:$V1,15:$V2,16:9,17:10,18:11,19:12,20:$V3,23:14,24:15,25:16,26:17,27:18,28:19,29:21,34:$V4,37:$V5,38:$V6,41:25,43:$V7,44:$V8,50:$V9,54:$Va,55:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,82:$Vg},{20:$Vj,32:116,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},o($Vh,[2,15]),o($Vh,[2,16]),o([11,36],[2,28],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI}),{11:[2,55]},{33:[1,118],36:[1,117]},o($VK,[2,54],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI}),{20:$Vj,32:119,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{20:[1,120]},{29:124,36:[1,121],51:122,52:123,78:$Vc,79:$Vd,80:$Ve,81:$Vf,82:$Vg},{35:[1,125]},{20:$Vj,32:126,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{20:$Vj,32:127,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{20:$Vj,32:128,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{20:$Vj,32:129,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{20:$Vj,32:130,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{20:$Vj,32:131,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{20:$Vj,32:132,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{20:$Vj,32:133,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{20:$Vj,32:134,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{20:$Vj,32:135,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{20:$Vj,32:136,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{20:$Vj,32:137,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},o($VJ,[2,73]),{36:[1,138],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI},o($VJ,[2,75]),o($VJ,[2,76]),o($VJ,[2,84]),o($VJ,[2,85]),{29:124,36:[1,139],51:140,52:123,78:$Vc,79:$Vd,80:$Ve,81:$Vf,82:$Vg},{36:[1,141]},o($Vh,[2,37]),{35:[1,142]},{36:[1,143],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI},{11:[1,144]},{11:[2,32]},{11:[2,33]},{20:[1,145],30:50},{31:$Vi},{36:[1,146],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI},{35:[1,147]},o($VL,[2,2]),{2:$V0,8:[1,148],9:37,10:4,12:5,13:6,14:$V1,15:$V2,16:9,17:10,18:11,19:12,20:$V3,23:14,24:15,25:16,26:17,27:18,28:19,29:21,34:$V4,37:$V5,38:$V6,41:25,43:$V7,44:$V8,50:$V9,54:$Va,55:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,82:$Vg},{36:[1,149],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI},{11:[2,56]},{20:$Vj,32:150,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{11:[2,24],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI},o($Vv,[2,26]),{6:151,7:$Vu},{33:$VM,36:[1,152]},o($VK,[2,51]),{20:[1,154]},{20:$Vj,32:155,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},o($VN,[2,61],{61:$Vz,62:$VA}),o($VN,[2,62],{61:$Vz,62:$VA}),o($VJ,[2,63]),o($VJ,[2,64]),o($VO,[2,65],{59:$Vx,60:$Vy,61:$Vz,62:$VA}),o($VO,[2,66],{59:$Vx,60:$Vy,61:$Vz,62:$VA}),o($VP,[2,67],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,67:$VF,68:$VG}),o($VP,[2,68],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,67:$VF,68:$VG}),o($VO,[2,69],{59:$Vx,60:$Vy,61:$Vz,62:$VA}),o($VO,[2,70],{59:$Vx,60:$Vy,61:$Vz,62:$VA}),o([11,33,36,48,69,70],[2,71],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG}),o([11,33,36,48,70],[2,72],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH}),o($VJ,[2,74]),{6:156,7:$Vu},{33:$VM,36:[1,157]},{6:158,7:$Vu},{20:$Vj,32:159,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{7:[1,160]},{20:$Vj,32:161,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},o($Vv,$Vw),{6:162,7:$Vu},{20:$Vj,32:163,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},o($VL,[2,3]),{6:164,7:$Vu},o($VK,[2,53],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI}),o($Vh,[2,48]),{6:165,7:$Vu},{29:124,52:166,78:$Vc,79:$Vd,80:$Ve,81:$Vf,82:$Vg},o($VK,[2,52]),{36:[1,167],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI},o($Vh,[2,46]),{6:168,7:$Vu},o($Vh,[2,60]),{36:[1,169],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI},{45:170,46:171,47:$VQ,49:$VR},{11:[1,174],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI},o($Vh,[2,29]),{36:[1,175],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI},o($VL,[2,40]),o($Vh,[2,49]),o($VK,[2,50]),{11:[2,59]},o($Vh,[2,47]),{6:176,7:$Vu},{8:[1,177],46:178,47:$VQ,49:$VR},o($VS,[2,43]),{20:$Vj,32:179,35:$Vk,59:$Vl,60:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt},{48:[1,180]},{12:182,20:[1,183],40:181},{11:[2,30]},o($VL,[2,39]),o($Vh,[2,41]),o($VS,[2,42]),{48:[1,184],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI},{2:$V0,4:185,9:3,10:4,12:5,13:6,14:$V1,15:$V2,16:9,17:10,18:11,19:12,20:$V3,23:14,24:15,25:16,26:17,27:18,28:19,29:21,34:$V4,37:$V5,38:$V6,41:25,43:$V7,44:$V8,50:$V9,54:$Va,55:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,82:$Vg},{36:[1,186]},{36:[2,34]},{21:[1,187],22:[1,188],31:$Vi},{2:$V0,4:189,9:3,10:4,12:5,13:6,14:$V1,15:$V2,16:9,17:10,18:11,19:12,20:$V3,23:14,24:15,25:16,26:17,27:18,28:19,29:21,34:$V4,37:$V5,38:$V6,41:25,43:$V7,44:$V8,50:$V9,54:$Va,55:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,82:$Vg},o($VS,[2,45],{10:4,12:5,13:6,16:9,17:10,18:11,19:12,23:14,24:15,25:16,26:17,27:18,28:19,29:21,41:25,9:37,2:$V0,14:$V1,15:$V2,20:$V3,34:$V4,37:$V5,38:$V6,43:$V7,44:$V8,50:$V9,54:$Va,55:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,82:$Vg}),{6:190,7:$Vu},{36:[2,35]},{36:[2,36]},o($VS,[2,44],{10:4,12:5,13:6,16:9,17:10,18:11,19:12,23:14,24:15,25:16,26:17,27:18,28:19,29:21,41:25,9:37,2:$V0,14:$V1,15:$V2,20:$V3,34:$V4,37:$V5,38:$V6,43:$V7,44:$V8,50:$V9,54:$Va,55:$Vb,78:$Vc,79:$Vd,80:$Ve,81:$Vf,82:$Vg}),o($Vh,[2,31])],
defaultActions: {30:[2,86],31:[2,87],32:[2,88],33:[2,89],34:[2,90],36:[2,1],77:[2,55],108:[2,32],109:[2,33],117:[2,56],167:[2,59],175:[2,30],182:[2,34],187:[2,35],188:[2,36]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

let Errores_1 = require('../Ast/src/errores');
let nodoError_1=require('../Ast/src/NodoError');

let Nodo_aux = require('../Ast/src/Nodo');

let lista_variables = require('../Ast/src/Variable');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:     
break;
case 1:
break;
case 2:return 78;
break;
case 3:return 79;
break;
case 4:return 82;
break;
case 5:return 81;
break;
case 6:return 80;
break;
case 7:return 50;
break;
case 8:return 58;
break;
case 9:return 43;
break;
case 10:return 55;
break;
case 11:return 57;
break;
case 12:return 42;
break;
case 13:return 44;
break;
case 14:return 47;
break;
case 15:return 14;
break;
case 16:return 49;
break;
case 17:return 38;
break;
case 18:return 34;
break;
case 19:return 37;
break;
case 20:return  'RESRETURN';
break;
case 21:return 15;
break;
case 22:return 76;
break;
case 23:return 77;
break;
case 24:return 11;
break;
case 25:return 7;
break;
case 26:return 8;
break;
case 27:return 35;
break;
case 28:return 36;
break;
case 29:return 33;
break;
case 30:return 56;
break;
case 31:return 48;
break;
case 32:return 66;
break;
case 33:return 68;
break;
case 34:return 67;
break;
case 35:return 31;
break;
case 36:return 63;
break;
case 37:return 64;
break;
case 38:return 65;
break;
case 39:return 69;
break;
case 40:return 70;
break;
case 41:return 71;
break;
case 42:return 21;
break;
case 43:return  'DECREMENTO';
break;
case 44:return 59;
break;
case 45:return 60;
break;
case 46:return 62;
break;
case 47:return 61;
break;
case 48: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 75; 
break;
case 49: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 74; 
break;
case 50:return 73;
break;
case 51:return 72;
break;
case 52:return 20;
break;
case 53:
break;
case 54:return 5;
break;
case 55: //console.error('Error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                        Errores_1.errores.add(new nodoError_1.NodoError('Lexico',yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));
                                                 
break;
}
},
rules: [/^(?:["\/"]["\/"][^\r\n]*[\n|\r|\r\n|\n\r]?)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:string\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:if\b)/i,/^(?:Console\b)/i,/^(?:Write\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:'[^\']*')/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[ \t\r\n\f])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}